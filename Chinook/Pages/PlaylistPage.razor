@page "/playlist/{playlistId:long}"
@attribute [Authorize]
@* @using FinanceMentor.Shared; *@
@inject IPlaylistService _playlistService
@inject IUserService _userService

@using Chinook.Models
@using Chinook.Services.Interfaces;
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims;

<h1>Playlist <strong>@playlist.Name</strong></h1>

@if (!string.IsNullOrWhiteSpace(infoMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @infoMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (playlist == null)
{
     <Loading />
}
else
{
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Track</th>
                <th></th>
        </tr>
        </thead>
        <tbody>
            @foreach (var track in playlist.Tracks)
            {
                <tr>
                    <td>@track.ArtistName - @track.AlbumTitle - @track.TrackName</td>
                    <td>
                        <div class="d-flex">
                            @if (playlist.Name != "Favorite")
                            {
                                @if (track.IsFavorite)
                                {
                                    <a href="#" class="m-1" title="Unark as favorite" @onclick="@(() => UnfavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star-fill"></i></a>
                                }
                                else
                                {
                                    <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => FavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star"></i></a>
                                }

                            }
                            <a href="#" class="m-1" title="Remove from this playlist" @onclick="@(() => RemoveTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-trash"></i></a>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter] public long playlistId { get; set; }
    private Chinook.ClientModels.Playlist playlist;
    private string infoMessage;

    protected override async Task OnInitializedAsync()
    {
        await GetInitialData();
    }

    protected override async Task OnParametersSetAsync()
    {
        await GetInitialData();
    }

    private async Task GetInitialData()
    {
        await InvokeAsync(StateHasChanged);
        var currentUserId = await _userService.GetUserId();
        playlist = await _playlistService.GetPlaylistById(playlistId, currentUserId);
    }

    private async void FavoriteTrack(long trackId)
    {
        var currentUserId = await _userService.GetUserId();
        var track = playlist.Tracks.FirstOrDefault(t => t.TrackId == trackId);
        await _playlistService.AddToUserFavouritesByTrackId(track.TrackId, currentUserId);
        await OnInitializedAsync();
        infoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} added to playlist Favorites.";
    }

    private async void UnfavoriteTrack(long trackId)
    {
        var currentUserId = await _userService.GetUserId();
        var track = playlist.Tracks.FirstOrDefault(t => t.TrackId == trackId);
        await _playlistService.RemoveFromUserFavouritesByTrackId(track.TrackId, currentUserId);
        await OnInitializedAsync();
        infoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} removed from playlist Favorites.";
    }

    private void RemoveTrack(long trackId)
    {
        CloseInfoMessage();
    }

    private void CloseInfoMessage()
    {
        infoMessage = "";
    }

}
