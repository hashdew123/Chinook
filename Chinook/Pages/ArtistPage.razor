@page "/artist/{ArtistId:long}"
@attribute [Authorize]
@inject IArtistService _artistService
@inject ITrackService _trackService
@inject IUserService _userService
@inject IPlaylistService _playlistService

@using Chinook.Models
@using Chinook.ClientModels
@using Chinook.Services.Interfaces;
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims;

@if (!string.IsNullOrWhiteSpace(infoMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @infoMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (artist == null)
{
    <Loading />
}
else
{
    <h1>@artist.Name</h1>
        <table class="table table-striped table-hover table-sm">
            <thead>
                <tr>
                    <th>Album title</th>
                    <th>Track name</th>
                    <th></th>
            </tr>
            </thead>
            <tbody>
            @foreach (var track in tracks)
            {
                <tr>
                    <td>@track.AlbumTitle</td>
                    <td>@track.TrackName</td>
                    <td>
                        @if (track.IsFavorite)
                        {
                            <a href="#" class="m-1" title="Unmark as favorite" @onclick="@(() => UnfavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star-fill"></i></a>
                        }
                        else
                        {
                            <a href="#" class="m-1" title="Mark as favorite" @onclick="@(() => FavoriteTrack(track.TrackId))" @onclick:preventDefault><i class="bi bi-star"></i></a>
                        }
                        <a href="#" class="m-1" title="Add to playlist" @onclick="@(() => OpenPlaylistDialog(track.TrackId))" @onclick:preventDefault><i class="bi bi-file-earmark-plus"></i></a>
                    </td>
                </tr>
            }
            </tbody>
        </table>

}

@code {
    [Parameter] public long artistId { get; set; }
    private Modal playlistDialog { get; set; }

    private Artist artist;
    private List<PlaylistTrack> tracks;
    private PlaylistTrack selectedTrack;
    private List<Models.Playlist> existingPlaylists;
    private long selectedPlaylistId { get; set; }
    private string newPlaylistName { get; set; }
    private string infoMessage;

    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(StateHasChanged);
        newPlaylistName = "";
        var currentUserId = await _userService.GetUserId();

        artist = await _artistService.GetArtistById(artistId);

        tracks = await _trackService.GetTracksByArtistId(artistId, currentUserId);
    }

    private async void FavoriteTrack(long trackId)
    {
        var currentUserId = await _userService.GetUserId();
        var track = tracks.FirstOrDefault(t => t.TrackId == trackId);
        await _playlistService.AddToUserFavouritesByTrackId(track.TrackId, currentUserId);
        await OnInitializedAsync();
        infoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} added to playlist Favorites.";
    }

    private async void UnfavoriteTrack(long trackId)
    {
        var currentUserId = await _userService.GetUserId();
        var track = tracks.FirstOrDefault(t => t.TrackId == trackId);
        await _playlistService.RemoveFromUserFavouritesByTrackId(track.TrackId, currentUserId);
        await OnInitializedAsync();
        infoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} removed from playlist Favorites.";
    }

    private async void OpenPlaylistDialog(long trackId)
    {
        CloseInfoMessage();
        var currentUserId = await _userService.GetUserId();
        selectedTrack = tracks.FirstOrDefault(t => t.TrackId == trackId);
        existingPlaylists = await _playlistService.GetPlaylistsByUserId(currentUserId);
        playlistDialog.Open();
    }

    private async void AddTrackToPlaylist(long trackId)
    {
        CloseInfoMessage();
        var currentUserId = await _userService.GetUserId();

        if (!string.IsNullOrEmpty(newPlaylistName))
        {
            await _playlistService.AddTrackToNewPlaylistById(trackId, newPlaylistName, currentUserId);
        }
        else
        {
            await _playlistService.AddTrackToExistingPlaylistById(trackId, selectedPlaylistId, currentUserId);
        }
        infoMessage = $"Track {artist.Name} - {selectedTrack.AlbumTitle} - {selectedTrack.TrackName} added to playlist {{playlist name}}.";
        await OnInitializedAsync();
        playlistDialog.Close();
    }


    private void CloseInfoMessage()
    {
        infoMessage = "";
    }
}

<Modal @ref="playlistDialog">
    <Title>
        Add to playlist
    </Title>
    <Body>
        @if (selectedTrack != null && existingPlaylists != null)
        {
            <div class="form-group mb-2">
                <label>@artist.Name - @selectedTrack.AlbumTitle - @selectedTrack.TrackName</label>
            </div>

        <div class="form-group mb-2">
                <label for="existingPlaylists">Add to existing playlist</label>
                <select class="form-control" id="existingPlaylists" @bind="selectedPlaylistId">
                    @foreach (var ExistingPlaylist in existingPlaylists)
                {
                        <option value="@ExistingPlaylist.PlaylistId">@ExistingPlaylist.Name</option>
                }
            </select>
        </div>
        <div class="form-group mb-2">
            <label for="NewPlaylist">Create new playlist</label>
                <input type="text" id="NewPlaylist" class="form-control" @bind="newPlaylistName" placeholder="Name for the new playlist">
        </div>
        }
    </Body>
    <Footer>
        <button class="btn btn-success" @onclick="@(() => AddTrackToPlaylist(selectedTrack.TrackId))">Save</button>
    </Footer>
</Modal>
